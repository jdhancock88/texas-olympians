{"version":3,"sources":["+custom.js"],"names":["$","document","ready","dateConverter","date","formatter","substring","dateParser","parse","setupData","athletes","sked","_","forEach","value","key","athlete","events","filter","e","name","sort","a","b","aName","trim","bName","aSplit","split","bSplit","aLast","length","bLast","targetDate","currentDate","toString","currentDateParser","dateFormatAbb","i","k","console","log","next_date","todaysAths","push","buildTodaysAths","buildOlympians","buildFilters","data","d3","select","selectAll","enter","append","attr","d","country","nation","toLowerCase","replace","text","content","sport","event","nexttime","channel","remove","click","target","this","each","checkExpansion","showAthletes","athDivs","compDates","j","thisDate","bronze","silver","gold","classed","athImage","athContent","athMedals","athName","html","athBio","bioContent","age","texastie","bio","athTable","eventDate","slice","completed","roundresult","moreOverlay","undefined","link1text","link1url","link2text","link2url","link3text","link3url","closest","nVisible","n","addClass","imagePath","eq","children","runIsotope","elem","hasClass","expand","$grid","isotope","movedAthlete","setTimeout","checkPosition","direction","removeClass","find","windowHeight","window","height","top","scrollTop","y","offset","animate","layoutMode","itemSelector","precentPosition","transitionDuration","inArray","sports","sportOption","dates","dateClass","dateOption","toUpperCase","filterAthletes","medal","filterString","v","Date","year","getFullYear","dataCounter","time","format","dateFormat","getJSON","updateDate","updated","shift","nextDate","nextdate","dateTime","jsDate","orderBy","spliceSpot","completedEvents","splice","concat","sportSelection","medalSelection","dateSelection","change","scroll","athletesTop"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar currentDate = new Date();\n\tvar year = currentDate.getFullYear();\n\n\tcurrentDate = Date.parse(currentDate);\n\n\n\t$('.copyright').text(year);\n\n\t// data counter will keep track if all of our data is loaded before we build the page\n\tvar dataCounter = 0;\n\n\t// variables that will ultimately hold our data\n\tvar sked;\n\tvar athletes;\n\n\t// date parser to parse the string into a date object\n\tvar dateParser = d3.time.format(\"%Y-%m-%d\");\n\tvar currentDateParser = d3.time.format(\"%b %d %Y\");\n\n\tfunction dateConverter(date, formatter) {\n\t\tdate = date.substring(0,10);\n\t\tdate = dateParser.parse(date);\n\t\tdate = formatter(date);\n\n\t\treturn date;\n\t}\n\n\t// date formater turns the date object into the correct Mon. Day, Year format\n\tvar dateFormat = d3.time.format(\"%B %e, %Y\");\n\tvar dateFormatAbb = d3.time.format(\"%b. %e, %Y\");\n\n\t// placeholder array for the athletes that are competing on any given day\n\tvar todaysAths = [];\n\n\t// number of athlete cards that are visible (0 indexed)\n\tvar nVisible = 11;\n\n\t// array that will hold all the competition dates\n\tvar dates = [];\n\n\n\t/////////////////////////////////////////////\n\t///// GETTING THE DATA //////////////////////\n\t/////////////////////////////////////////////\n\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-sked.json\", function(data) {\n\n\t\t// set our sked array equal to the data returned\n\t\tsked = data;\n\n\t\t// update our update date in the byline\n\t\tvar updateDate = dateConverter(sked[0].updated, dateFormat);\n\t\tsked.shift();\n\t\t$('.update').text(updateDate);\n\n\n\t\t_.forEach(sked, function(value, key) {\n\t\t\t// cut our date down to just YYYY-MM-DD\n\t\t\t// parse it into a date object\n\t\t\t// then format it into our MMM. DD, YYYY format\n\t\t\tvar nextDate = dateConverter(value.nextdate, dateFormatAbb);\n\n\t\t\t// create a string to get a valid date and time to be parsed into an accurate js date\n\t\t\tdateTime = nextDate + \", \" + value.nexttime;\n\t\t\tjsDate = Date.parse(dateTime);\n\t\t\tvalue.jsDate = jsDate;\n\t\t\tvalue.next_date = nextDate;\n\t\t\tvalue.gold = value.gold;\n\t\t\tvalue.silver = value.silver;\n\t\t\tvalue.bronze = value.bronze;\n\n\t\t});\n\n\t\t// order the sked by date\n\t\tsked = _.orderBy(sked, \"jsDate\", \"asc\");\n\n\t\t// populate the dates array with each competition date only once\n\t\t// this will be used later to create the competition dates dropdown\n\t\tfor (i = 0; i < sked.length; i++) {\n\t\t\tif ($.inArray(sked[i].next_date, dates) === -1) {\n\t\t\t\tdates.push(sked[i].next_date);\n\t\t\t}\n\t\t}\n\n\t\t// setting a variable that will be where we splice the events\n\t\t// array when we check to see if the events have finished\n\t\tvar spliceSpot;\n\n\t\t// iterate over each event, and find the last event to already\n\t\t// have occurred\n\t\tfor (i=0; i<sked.length; i++) {\n\t\t\tif (sked[i].jsDate < currentDate){\n\t\t\t\tspliceSpot = i;\n\t\t\t}\n\t\t}\n\n\t\t// create an array of events that are finished and have no upcoming times\n\t\tvar completedEvents = sked.splice(0, (spliceSpot));\n\n\t\t// merge the events back together in one array\n\t\t// with the completed events at the end\n\t\tsked = sked.concat(completedEvents);\n\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\n\t});\n\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-athletes.json\", function(data) {\n\t\tathletes = data;\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\t});\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// SETTING UP OUR DATA FOR ALL ATHLETES //\n\t/////////////////////////////////////////////\n\n\t// for each athlete, we'll cycle through our sked and add each event\n\t// to an events key on the athlete object\n\n\tfunction setupData(athletes, sked) {\n\n\t\t_.forEach(athletes, function(value, key) {\n\n\t\t\tvar athlete = value;\n\t\t\tathlete.events = [];\n\n\t\t\tathlete.events = _.filter(sked, function(e) {\n\t\t\t\treturn e.athlete == athlete.name;\n\t\t\t});\n\n\t\t});\n\n\n\t\t// sort the athletes alphabetically by last name\n\n\t\tathletes.sort(function(a, b){\n\t\t\tvar aName = a.name.trim();\n\t\t\tvar bName = b.name.trim();\n\n\t\t\tvar aSplit = aName.split(\" \");\n\t\t\tvar bSplit = bName.split(\" \");\n\n\t\t\tvar aLast = aSplit[aSplit.length - 1];\n\t\t\tvar bLast = bSplit[bSplit.length - 1];\n\n\t\t\tif (aLast < bLast) return -1;\n\t\t\tif (aLast > bLast) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\t\t// getting the current date in the the same format as the next_date value on\n\t\t// our athlete objects\n\t\tvar targetDate = currentDate.toString().substring(4, 15);\n\t\ttargetDate = currentDateParser.parse(targetDate);\n\t\ttargetDate = dateFormatAbb(targetDate);\n\n\t\t// checking over each of our athletes and populating the todaysAths array\n\t\t// with each of the athletes that match the current date\n\t\tfor (i = 0; i < athletes.length; i++) {\n\t\t\tfor (k = 0; k < athletes[i].events.length; k++) {\n\t\t\t\tconsole.log(athletes[i].events[k].next_date, targetDate);\n\t\t\t\tif (athletes[i].events[k].next_date === targetDate) {\n\t\t\t\t\ttodaysAths.push(athletes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(todaysAths);\n\n\t\t// passing our todayAths and the targetDate off to the function\n\t\t// that builds out our divs of the athletes competing today\n\t\tbuildTodaysAths(todaysAths, targetDate);\n\n\t\t// pass the data off to our olympian drawing function\n\t\tbuildOlympians(athletes, \"#olympians\");\n\n\t\t// build the dropdowns\n\t\tbuildFilters();\n\t}\n\n\t/////////////////////////////////////////////\n\t///// BUILDING OUT TODAY'S ATHLETES /////////\n\t/////////////////////////////////////////////\n\n\n\tfunction buildTodaysAths(data, targetDate) {\n\t\tconsole.log(data);\n\t\tif (data.length > 0) {\n\t\t\tvar todaysAths = d3.select(\"#todaysAths\").selectAll(\".upNext\")\n\t\t\t\t.data(data);\n\n\t\t\ttodaysAths.enter().append(\"div\")\n\t\t\t\t.attr(\"class\", \"upNext clearFix\");\n\n\t\t\ttodaysAths.append(\"img\")\n\t\t\t\t.attr(\"src\", function(d) {\n\t\t\t\t\tvar country = d.nation.toLowerCase();\n\t\t\t\t\tcountry = country.replace(/ /g, \"\");\n\t\t\t\t\treturn \"images/_\" + country + \"Flag.jpg\";\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"h6\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\treturn d.name;\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"p\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tvar content;\n\t\t\t\t\tfor (i=0; i < d.events.length; i++) {\n\t\t\t\t\t\tif (d.events[i].next_date === targetDate) {\n\t\t\t\t\t\t\tcontent = d.sport + \", \" + d.events[i].event;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn content;\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"p\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tvar content;\n\t\t\t\t\tfor (i=0; i < d.events.length; i++) {\n\t\t\t\t\t\tif (d.events[i].next_date == targetDate) {\n\t\t\t\t\t\t\tcontent = d.events[i].nexttime + \", \" + d.events[i].channel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn content;\n\t\t\t\t});\n\t\t} else {\n\t\t\t$(\"#scheduleDisplay\").remove();\n\t\t}\n\n\t\t// ENDS D3 ATHLETE DIV SETUP AND BEGINS ASSIGNING FUNCTIONS\n\n\t\t// assigning click funtion that expands and displays an athlete when\n\t\t// their name is clicked on from the schedule of today's athletes\n\n\t\t$(\".upNext h6\").click(function() {\n\n\t\t\tvar athlete;\n\n\t\t\t//grabbing the name of the athlete\n\t\t\tvar target = $(this).text();\n\n\t\t\t// find the corresponding athlete div that matches the target name\n\t\t\t$.each($(\".athlete\"), function() {\n\t\t\t\tif ( $(this).attr(\"data-athlete\") === target) {\n\t\t\t\t\tathlete = $(this);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// pass that div off to the checkExpansion function, which will\n\t\t\t// check if it's expanded currently and show it, then reposition\n\t\t\t// the window to accomodate any movement. It'll also run the showAthletes function\n\t\t\t// with a number large enough to make sure all athletes are displayed\n\n\t\t\tcheckExpansion(athlete);\n\t\t\tshowAthletes(1000);\n\n\t\t});\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// BUILDING OUT THE ATHLETE BLOCKS ///////\n\t/////////////////////////////////////////////\n\n\t// below, we're using d3 to build out our divs for each athletes\n\t// as with most things in d3, it's magical. mostly just creating\n\t// html elements based off the data for each athlete\n\n\tfunction buildOlympians(athletes, target) {\n\n\t\tconsole.log(athletes);\n\t\tvar athDivs = d3.select(target).selectAll(\".athlete\")\n\t\t\t.data(athletes);\n\n\t\tathDivs.enter().append(\"div\")\n\t\t\t.attr(\"class\", function(d) {\n\t\t\t\tvar sport = d.sport.toLowerCase();\n\t\t\t\tsport = sport.replace(/ |'|&/g, \"\");\n\n\t\t\t\tvar compDates = \"\";\n\n\t\t\t\tfor (j = 0; j < d.events.length; j++) {\n\t\t\t\t\tthisDate = d.events[j].next_date.toLowerCase();\n\t\t\t\t\tthisDate = thisDate.replace(/ |,|\\./g, \"\");\n\t\t\t\t\tcompDates += (\" \" + thisDate);\n\t\t\t\t}\n\n\n\t\t\t\tif (d.bronze > 0 || d.silver > 0 || d.gold > 0) {\n\t\t\t\t\treturn \"athlete medalWinner \" + sport + compDates;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"athlete \" + sport + compDates;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.classed(\"bronzeWinner\", function(d) {\n\t\t\t\tif (d.bronze > 0) {return true;}\n\t\t\t})\n\t\t\t.classed(\"silverWinner\", function(d) {\n\t\t\t\tif (d.silver > 0) {return true;}\n\t\t\t})\n\t\t\t.classed(\"goldWinner\", function(d) {\n\t\t\t\tif (d.gold > 0) {return true;}\n\t\t\t})\n\t\t\t.attr(\"data-athlete\", function(d) {\n\t\t\t\treturn d.name;\n\t\t\t});\n\n\t\tvar expander = athDivs.append(\"i\")\n\t\t\t.attr(\"class\", \"fa fa-plus-circle expander\");\n\n\t\tvar athImage = athDivs.append(\"img\")\n\t\t\t.attr(\"src\", \"images/_defaultImage.jpg\");\n\n\t\tathImage.attr(\"data-src\", function(d) {\n\t\t\t\tvar name = d.name.toLowerCase();\n\t\t\t\tname = name.replace(/ /g, \"\");\n\t\t\t\treturn \"images/_\" + name +\".jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {return d.name;});\n\n\t\tvar athContent = athDivs.append(\"div\")\n\t\t\t.attr(\"class\", \"athContent\");\n\n\n\t\tvar athMedals = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"medalGroup clearFix\");\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"gold\")\n\t\t\t\t.text(function(d) {return d.gold;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"silver\")\n\t\t\t\t.text(function(d) {return d.silver;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"bronze\")\n\t\t\t\t.text(function(d) {return d.bronze;});\n\n\n\t\tvar athName = athContent .append(\"div\")\n\t\t\t.attr(\"class\", \"nameBlock clearFix\");\n\n\t\tathName.append(\"img\")\n\t\t\t.attr(\"src\", function(d) {\n\t\t\t\tvar country = d.nation.toLowerCase();\n\t\t\t\tcountry = country.replace(/ /g, \"\");\n\t\t\t\treturn \"images/_\" + country + \"Flag.jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {\n\t\t\t\treturn d.nation;\n\t\t\t})\n\t\t\t.attr(\"class\", \"flag\");\n\n\t\tathName.append(\"h4\")\n\t\t\t.html(function(d){\n\t\t\t\treturn d.name;\n\t\t\t});\n\n\t\tathName.append(\"h5\")\n\t\t\t.attr(\"class\", \"country\")\n\t\t\t.text(function(d) {\n\t\t\t\treturn d.nation;\n\t\t\t});\n\n\t\tvar athBio = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"bio\");\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Age</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.age + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Texas tie</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.texastie + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Sport</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.sport + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\tathContent.append(\"p\")\n\t\t\t.attr(\"class\", \"blurb\")\n\t\t\t.html(function(d){return d.bio;});\n\n\t\tvar athTable = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"schedule\");\n\n\t\t\tathTable.append(\"p\")\n\t\t\t\t.attr(\"class\", \"label\")\n\t\t\t\t.text(\"Schedule and Results\");\n\n\t\t\tathTable.append(\"table\")\n\t\t\t.attr(\"class\", \"scheduleTable\")\n\t\t\t.html(function(d) {\n\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tfor (i= -1; i < d.events.length; i++) {\n\t\t\t\t\tvar gold = false,\n\t\t\t\t\t\tsilver = false;\n\t\t\t\t\t\tbronze = false;\n\n\t\t\t\t\tif (i >= 0) {\n\t\t\t\t\t\tif (d.events[i].gold === \"x\") {\n\t\t\t\t\t\t\tgold = true;\n\t\t\t\t\t\t} else if (d.events[i].silver === \"x\") {\n\t\t\t\t\t\t\tsilver = true;\n\t\t\t\t\t\t} else if (d.events[i].bronze === \"x\") {\n\t\t\t\t\t\t\tbronze = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (i === -1) {\n\t\t\t\t\t\tcontent +=  \"<tr><th>Event</th><th>Time/Date</th><th>Ch.</th><th>Round/Place</th></tr>\";\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvar eventDate = d.events[i].next_date;\n\n\t\t\t\t\t\teventDate = eventDate.slice(0, -6);\n\n\t\t\t\t\t\tif (d.events[i].completed !== \"yes\") {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>\" + d.events[i].nexttime +\", \" + eventDate + \"</td><td>\" + d.events[i].channel + \"</td>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>Completed</td><td>\" + d.events[i].channel + \"</td>\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (gold === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal goldMedal'></span>Gold</td></tr>\";\n\t\t\t\t\t\t} else if (silver === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal silverMedal'></span>Silver</td></tr>\";\n\t\t\t\t\t\t} else if (bronze === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal bronzeMedal'></span>Bronze</td></tr>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<td>\" + d.events[i].roundresult +  \"</td></tr>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar athLinks = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"links\")\n\t\t\t.html(function(d) {\n\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tif (d.link1text !== undefined) {\n\t\t\t\t\tcontent += \"<p class='label'>Related content</p>\";\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link1url + \"'>\" + d.link1text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link2text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link2url + \"'>\" + d.link2text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link3text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link3url + \"'>\" + d.link3text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar moreOverlay = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"moreOverlay\")\n\t\t\t.append(\"button\")\n\t\t\t.attr(\"class\", \"readMore\");\n\n\t\tmoreOverlay.html(\"<i class='fa fa-plus-circle'></i> Read more\");\n\n\n\t\t// ENDS D3 ATHLETE DIV SETUP AND BEGINS ASSIGNING FUNCTIONS AND RUNNING LAYOUTS\n\n\t\t// controlling the expanding/collapsing of athlete divs when\n\t\t// the readmore or +/- button is clicked\n\n\t\t$(\".readMore, .expander\").click(function() {\n\t\t\tvar athlete = $(this).closest(\".athlete\");\n\t\t\tcheckExpansion(athlete);\n\t\t});\n\n\n\t\tshowAthletes(nVisible);\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// DISPLAYING 12 AT A TIME  //////////////\n\t/////////////////////////////////////////////\n\n\tfunction showAthletes(n) {\n\t\tif (n > $(\".athlete\").length - 1) {\n\t\t\tn = $(\".athlete\").length - 1;\n\t\t\t$(\"#moreButtons\").addClass(\"noShow\");\n\t\t}\n\t\tfor (i = 0; i <= n; i++) {\n\t\t\tvar imagePath = $(\".athlete\").eq(i).children(\"img\").attr(\"data-src\");\n\t\t\t$(\".athlete\").eq(i).addClass(\"visible\").children(\"img\").attr(\"src\", imagePath);\n\t\t}\n\n\t\tif (n < $(\".athlete\").length - 1) {\n\t\t\tnVisible = nVisible + 12;\n\t\t} else {\n\t\t\t$(\"#loadMore\").remove();\n\t\t}\n\n\t\trunIsotope();\n\n\t}\n\n\t$(\"#loadMore\").click(function() {\n\t\tshowAthletes(nVisible);\n\t});\n\n\t$(\"#loadAll\").click(function() {\n\t\tshowAthletes(1000);\n\t});\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// CHECKING EXPANSION OR COLLAPSE ////////\n\t/////////////////////////////////////////////\n\n\tfunction checkExpansion(elem) {\n\t\tif (elem.hasClass(\"expanded\") === false) {\n\t\t\texpand(elem, \"expand\"); //open the athlete clicked\n\t\t\t$grid.isotope(\"layout\"); //rerun the isotope layout\n\t\t}\n\t\t// if the athlete is open ...\n\t\telse {\n\t\t\texpand(elem, \"collapse\"); // collapse that athlete\n\t\t\t$grid.isotope(\"layout\"); // rerun the isotope layout\n\t\t}\n\n\t\t// assign the athlete we're clicking on to the movedAthlete variable\n\t\tvar movedAthlete = elem;\n\n\t\t// after the animation has finished running, run the checkPosition function\n\t\tsetTimeout(function() {\n\t\t\tcheckPosition(movedAthlete);\n\t\t}, 525);\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CONTROLLING ATHLETE EXPANSION /////////\n\t/////////////////////////////////////////////\n\n\t// the expand function is passed two parameters, the object we clicked on,\n\t// and the direction (\"expand\" or \"collapse\")\n\n\tfunction expand(athlete, direction) {\n\n\t\t// let's see what we're doing: expanding or collapsing?\n\t\tif (direction === \"expand\") {\n\n\t\t\t// collapse any open athletes, display all hidden read more buttons,\n\t\t\t// and reset all minus circles to plus circles\n\t\t\t$(\".athlete\").removeClass(\"expanded\");\n\t\t\t$(\".athlete\").find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\t$(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\n\t\t\t// on the expanding athlete, swap the plus circle for the minus circle,\n\t\t\t// hide the read more button, then expand with the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-plus-circle\").addClass(\"fa-minus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").addClass(\"hidden\");\n\t\t\tathlete.addClass(\"expanded\");\n\n\t\t} else if (direction === \"collapse\") {\n\n\t\t\t// swap +/- circle, display the read more button, then collapse by\n\t\t\t// removing the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\tathlete.removeClass(\"expanded\");\n\t\t}\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CHECKING EXPANDED ATHLETE POSITION ////\n\t/////////////////////////////////////////////\n\n\t// the checkPosition function is passed the athlete div that has changed\n\t// position. if it falls within 100 pixels of the bottom of the window\n\t// or above the top of the window, the window scrolls to that athlete's position\n\n\tfunction checkPosition(athlete) {\n\n\t\t// grabs the height and scrolltop of the window, and the offset position\n\t\t// of the athlete that has changed layout\n\t\tvar windowHeight = $(window).height();\n\t\tvar top = $(window).scrollTop();\n\t\tvar y = athlete.offset().top;\n\n\t\t// if that athlete falls within 100 pixels of the bottom of the window\n\t\t// or above the top, the window scrolls the athlete into view\n\t\tif (y > top + (windowHeight - 100) || y < top) {\n\t\t\t$(\"html, body\").animate({\n\t\t\t\tscrollTop: y - 100\n\t\t\t}, 500);\n\t\t}\n\t}\n\n\n\n\t/////////////////////////////////////////////\n\t///// INITIALIZING ISOTOPE //////////////////\n\t/////////////////////////////////////////////\n\n\tvar $grid;\n\n\tfunction runIsotope() {\n\t\t// setting up the isotope grid. for more info, see: http://isotope.metafizzy.co/\n\t\t$grid = $(\"#olympians\").isotope({\n\t\t\tlayoutMode: 'packery',\n\t\t\titemSelector: '.athlete',\n\t\t\tprecentPosition: true,\n\t\t\ttransitionDuration: 500\n\t\t});\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CREATING DROPDOWNS ////////////////////\n\t/////////////////////////////////////////////\n\n\t// array that will hold all the sports\n\tvar sports = [];\n\n\n\t// setting the individual dropdown variables to the default \"athlete\" class\n\tvar sportSelection = \"athlete\";\n\tvar medalSelection = \"athlete\";\n\tvar dateSelection = \"athlete\";\n\n\n\t// building out our dropdown filters based on the data\n\tfunction buildFilters() {\n\n\t\t// iterate over the athletes array and gather up each sport listed just once\n\t\tfor (i = 0; i < athletes.length; i++) {\n\t\t\tif ($.inArray(athletes[i].sport, sports) === -1) {\n\t\t\t\tsports.push(athletes[i].sport);\n\t\t\t}\n\t\t}\n\n\t\t// iterate over the sports array, lowercasing and removing non alphabetical\n\t\t// characters, then build out an option element to append to the sports dropdown\n\n\t\tfor (i = 0; i < sports.length; i++) {\n\t\t\tvar sport = sports[i].toLowerCase();\n\t\t\tsport = sport.replace(/ |'|&/g, \"\");\n\t\t\tvar sportOption = \"<option data-selection='\" + sport + \"'>\" + sports[i] + \"</option>\";\n\t\t\t$(\"#sports\").append(sportOption);\n\t\t}\n\n\n\t\t// iterate over the dates array, creating a dateClass variable that lower cases\n\t\t// and removes spaces, commas and periods from each next_date string,\n\t\tfor (i = 0; i < dates.length; i++) {\n\t\t\tvar dateClass = dates[i] = dates[i].toLowerCase();\n\t\t\tdateClass = dateClass.replace(/ |,|\\./g, \"\");\n\n\t\t\t// use that dateClass variable to build out an option element and append it\n\t\t\t// to the dates dropdown\n\t\t\tvar dateOption = \"<option data-selection='\" + dateClass + \"'>\" + dates[i][0].toUpperCase() + dates[i].substring(1) + \"</option>\";\n\t\t\t$(\"#dates\").append(dateOption);\n\t\t}\n\n\t}\n\n\t/////////////////////////////////////////////\n\t///// FILTERING AHTLETES ////////////////////\n\t/////////////////////////////////////////////\n\n\n\t// when one of the filter dropdowns is changed, pass off the values for the three\n\t// dropdown variables to the filterAthletes function\n\n\t$(\"#sports\").change(function() {\n\t\t$(\".athlete\").addClass(\"visible\");\n\t\tsportSelection = $(this).find(\"option:selected\").attr(\"data-selection\");\n\t\tfilterAthletes(sportSelection, medalSelection, dateSelection);\n\t});\n\n\t$(\"#medals\").change(function() {\n\t\t$(\".athlete\").addClass(\"visible\");\n\t\tmedalSelection = $(this).find(\"option:selected\").attr(\"data-selection\");\n\t\tfilterAthletes(sportSelection, medalSelection, dateSelection);\n\t});\n\n\t$(\"#dates\").change(function() {\n\t\t$(\".athlete\").addClass(\"visible\");\n\t\tdateSelection = $(this).find(\"option:selected\").attr(\"data-selection\");\n\t\tfilterAthletes(sportSelection, medalSelection, dateSelection);\n\t});\n\n\n\n\n\tfunction filterAthletes(sport, medal, date) {\n\n\t\t// hide the more buttons once someone filters\n\t\t$(\"#moreButtons\").addClass(\"noShow\");\n\n\n\t\t//rerun isotope based on the new filter string that's passed\n\t\tfilterString = \".\"+sport+\".\"+medal+\".\"+date;\n\t\t$grid.isotope({\n\t\t\tfilter: filterString\n\t\t});\n\n\t\t// lazyload in the images of any athlete that gets shown by filtering\n\t\t$.each($(filterString), function(k,v) {\n\t\t\tvar imagePath = $(this).children(\"img\").attr(\"data-src\");\n\t\t\t$(this).children(\"img\").attr(\"src\", imagePath);\n\t\t});\n\n\n\t\t// check to see if there are any athletes visible. If there are not,\n\t\t// display the messaging that lets users know no athletes matched their criteria\n\t\tif ($(\"#olympians\").height() === 0) {\n\t\t\t$(\"h6.chatterHed\").removeClass(\"noShow\");\n\t\t} else {\n\t\t\t$(\"h6.chatterHed\").addClass(\"noShow\");\n\t\t}\n\n\t\tsetTimeout(function() {\n\t\t\tif ($(\"#olympians\").offset().top < $(window).scrollTop()) {\n\t\t\t\t$(\"html, body\").animate({\n\t\t\t\t\tscrollTop: $(\"#olympians\").offset().top - 100\n\t\t\t\t}, 750);\n\t\t\t}\n\t\t}, 600);\n\n\n\t}\n\n\n\t// while scrolling, if the top of the olympians div is above the top of the\n\t// window, make the filtering div sticky to the top\n\t$(window).scroll(function() {\n\t\tvar athletesTop = $(\"#olympians\").offset().top;\n\t\tif ($(window).scrollTop() > athletesTop) {\n\t\t\t$(\"#filters\").addClass(\"fixed\");\n\t\t} else {\n\t\t\t$(\"#filters\").removeClass(\"fixed\");\n\t\t}\n\n\t});\n\n});\n"],"sourceRoot":"/source/"}