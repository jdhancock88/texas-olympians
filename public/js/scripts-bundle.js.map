{"version":3,"sources":["+custom.js"],"names":["$","document","ready","setupData","athletes","sked","console","time","_","forEach","value","key","athlete","events","filter","e","name","timeEnd","sort","a","b","keyA","Date","jsDate","keyB","targetDate","currentDate","toString","substring","currentDateParser","parse","dateFormat","i","length","k","next_date","todaysAths","push","buildTodaysAths","spliceSpot","log","finished","splice","concat","buildOlympians","buildFilters","data","d3","select","selectAll","enter","append","attr","d","country","nation","toLowerCase","replace","text","content","event","nexttime","channel","remove","click","target","this","each","showAthletes","checkExpansion","athDivs","sport","bronze","silver","gold","classed","athImage","athContent","athMedals","athName","html","athBio","bioContent","age","texastie","bio","athTable","completed","roundresult","moreOverlay","undefined","link1text","link1url","link2text","link2url","link3text","link3url","closest","nVisible","n","addClass","imagePath","eq","children","runIsotope","elem","hasClass","expand","$grid","isotope","movedAthlete","setTimeout","checkPosition","direction","removeClass","find","windowHeight","window","height","top","scrollTop","y","offset","animate","layoutMode","itemSelector","precentPosition","transitionDuration","inArray","sports","option","filterAthletes","medal","filterString","v","year","getFullYear","dataCounter","dateParser","format","getJSON","nextDate","nextdate","dateTime","orderBy","completedEvents","medalSelection","change","sportsSelection","scroll","athletesTop"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar currentDate = new Date();\n\tvar year = currentDate.getFullYear();\n\n\tcurrentDate = Date.parse(currentDate);\n\n\tconsole.log(Date.parse(\"today\"));\n\n\t$('.copyright').text(year);\n\n\t// data counter will keep track if all of our data is loaded before we build the page\n\tvar dataCounter = 0;\n\n\t// variables that will ultimately hold our data\n\tvar sked;\n\tvar athletes;\n\n\t// date parser to parse the string into a date object\n\tvar dateParser = d3.time.format(\"%Y-%m-%d\");\n\tvar currentDateParser = d3.time.format(\"%b %d %Y\");\n\n\t// date formater turns the date object into the correct Mon. Day, Year format\n\tvar dateFormat = d3.time.format(\"%b. %d, %Y\");\n\n\tvar todaysAths = [];\n\n\n\tvar nVisible = 11;\n\n\n\t/////////////////////////////////////////////\n\t///// GETTING THE DATA //////////////////////\n\t/////////////////////////////////////////////\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-sked.json\", function(data) {\n\t\tsked = data;\n\n\t\t_.forEach(sked, function(value, key) {\n\t\t\t// cut our date down to just YYYY-MM-DD\n\t\t\t// parse it into a date object\n\t\t\t// then format it into our MMM. DD, YYYY format\n\t\t\tvar nextDate = value.nextdate.substring(0,10);\n\t\t\tnextDate = dateParser.parse(nextDate);\n\t\t\tnextDate = dateFormat(nextDate);\n\n\t\t\t// create a string to get a valid date and time to be parsed into an accurate js date\n\t\t\tdateTime = nextDate + \", \" + value.nexttime;\n\t\t\tjsDate = Date.parse(dateTime);\n\t\t\tvalue.jsDate = jsDate;\n\t\t\tvalue.next_date = nextDate;\n\t\t\tvalue.gold = value.gold;\n\t\t\tvalue.silver = value.silver;\n\t\t\tvalue.bronze = value.bronze;\n\n\t\t\t// sorts the individual events on each athlete by next event date and time\n\t\t\t// sked.sort(function(a, b) {\n\t\t\t// \tvar keyA = new Date(a.next_date),\n\t\t\t// \t\tkeyB = new Date(b.next_date);\n\t\t\t//\n\t\t\t// \tif (keyA < keyB) {return 1;}\n\t\t\t// \tif (keyA > keyB) {return -1;}\n\t\t\t// \treturn 0;\n\t\t\t// });\n\n\n\t\t});\n\n\t\tsked = _.orderBy(sked, \"jsDate\", \"asc\");\n\n\t\t// setting a variable that will be where we splice the events\n\t\t// array when we check to see if the events have finished\n\t\tvar spliceSpot;\n\n\t\t// iterate over each event, and find the last event to already\n\t\t// have occurred\n\t\tfor (i=0; i<sked.length; i++) {\n\t\t\tif (sked[i].jsDate < currentDate){\n\t\t\t\tspliceSpot = i;\n\t\t\t}\n\t\t}\n\n\t\t// create an array of events that are finished and have no upcoming times\n\t\tvar completedEvents = sked.splice(0, (spliceSpot));\n\n\t\t// merge the events back together in one array\n\t\t// with the completed events at the end\n\t\tsked = sked.concat(completedEvents);\n\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\t});\n\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-athletes.json\", function(data) {\n\t\tathletes = data;\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\t});\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// SETTING UP OUR DATA FOR ALL ATHLETES //\n\t/////////////////////////////////////////////\n\n\n\n\t// for each athlete, we'll cycle through our sked and add each event\n\t// to an events key on the athlete object\n\n\tfunction setupData(athletes, sked) {\n\n\t\tconsole.time(\"marrying\");\n\t\t_.forEach(athletes, function(value, key) {\n\n\t\t\tvar athlete = value;\n\t\t\tathlete.events = [];\n\n\t\t\tvar found = false;\n\n\t\t\tathlete.events = _.filter(sked, function(e) {\n\t\t\t\treturn e.athlete == athlete.name;\n\t\t\t});\n\n\n\t\t\t// $.each(sked, function() {\n\t\t\t// \t// cut our date down to just YYYY-MM-DD\n\t\t\t// \t// parse it into a date object\n\t\t\t// \t// then format it into our MMM. DD, YYYY format\n\t\t\t// \tvar nextDate = this.nextdate.substring(0,10);\n\t\t\t// \tnextDate = dateParser.parse(nextDate);\n\t\t\t// \tnextDate = dateFormat(nextDate);\n\t\t\t//\n\t\t\t// \t// create a string to get a valid date and time to be parsed into an accurate js date\n\t\t\t// \tdateTime = nextDate + \", \" + this.nexttime;\n\t\t\t// \tjsDate = Date.parse(dateTime);\n\t\t\t//\n\t\t\t//\n\t\t\t// \tif (athlete.name !== this.athlete && found === true) {\n\t\t\t// \t\treturn false;\n\t\t\t// \t}\n\t\t\t//\n\t\t\t// \t// // add each event into our events key\n\t\t\t// \t// if (athlete.name === this.athlete) {\n\t\t\t// \t// \tvar event = {\n\t\t\t// \t// \t\t\"jsdate\": jsDate,\n\t\t\t// \t// \t\t\"event\": this.event,\n\t\t\t// \t// \t\t\"next_date\": nextDate,\n\t\t\t// \t// \t\t\"next_time\": this.nexttime,\n\t\t\t// \t// \t\t\"channel\": this.channel,\n\t\t\t// \t// \t\t\"roundresult\": this.roundresult,\n\t\t\t// \t// \t\t\"gold\": this.gold,\n\t\t\t// \t// \t\t\"silver\": this.silver,\n\t\t\t// \t// \t\t\"bronze\": this.bronze,\n\t\t\t// \t// \t\t\"completed\": this.completed\n\t\t\t// \t// \t};\n\t\t\t// \t//\n\t\t\t// \t// \tfound = true;\n\t\t\t// \t// \t// push each event to the events array on each athlete\n\t\t\t// \t// \tathlete.events.push(event);\n\t\t\t// \t//\n\t\t\t// \t// \t// sorts the individual events on each athlete by next event date and time\n\t\t\t// \t// \tathlete.events.sort(function(a, b) {\n\t\t\t// \t// \t\tvar keyA = new Date(a.jsdate),\n\t\t\t// \t// \t\t\tkeyB = new Date(b.jsdate);\n\t\t\t// \t//\n\t\t\t// \t// \t\tif (keyA < keyB) {return -1;}\n\t\t\t// \t// \t\tif (keyA > keyB) {return 1;}\n\t\t\t// \t// \t\treturn 0;\n\t\t\t// \t// \t});\n\t\t\t// \t//\n\t\t\t// \t// \t// setting a variable that will be where we splice the events\n\t\t\t// \t// \t// array when we check to see if the events have finished\n\t\t\t// \t// \tvar spliceSpot;\n\t\t\t// \t//\n\t\t\t// \t// \t// iterate over each event, and find the last event to already\n\t\t\t// \t// \t// have occurred\n\t\t\t// \t// \tfor (i=0; i<athlete.events.length; i++) {\n\t\t\t// \t// \t\tif (athlete.events[i].jsdate < currentDate){\n\t\t\t// \t// \t\t\tspliceSpot = i;\n\t\t\t// \t// \t\t}\n\t\t\t// \t// \t}\n\t\t\t// \t//\n\t\t\t// \t// \t// create an array of events that are finished and have no upcoming times\n\t\t\t// \t// \tvar completedEvents = athlete.events.splice(0, (spliceSpot + 1));\n\t\t\t// \t//\n\t\t\t// \t// \t// merge the events back together in one array\n\t\t\t// \t// \t// with the completed events at the end\n\t\t\t// \t// \tathlete.events = athlete.events.concat(completedEvents);\n\t\t\t// \t//\n\t\t\t// \t// }\n\t\t\t// });\n\n\t\t});\n\t\tconsole.timeEnd(\"marrying\");\n\t\t// end each function that marries the two data sets together\n\n\t\t// sorts the athletes by their next event date and time\n\n\t\tathletes.sort(function(a, b) {\n\t\t\tvar keyA = new Date(a.events[0].jsDate),\n\t\t\t\tkeyB = new Date(b.events[0].jsDate);\n\t\t\tif (keyA < keyB) {return -1;}\n\t\t\tif (keyA > keyB) {return 1;}\n\t\t\treturn 0;\n\t\t});\n\n\t\t// getting the current date in the the same format as the next_date value on\n\t\t// our athlete objects\n\t\tvar targetDate = currentDate.toString().substring(4, 15);\n\t\ttargetDate = currentDateParser.parse(targetDate);\n\t\ttargetDate = dateFormat(targetDate);\n\n\t\t// checking over each of our athletes and populating the todaysAths array\n\t\t// with each of the athletes that match the current date\n\t\tfor (i = 0; i < athletes.length; i++) {\n\t\t\tfor (k = 0; k < athletes[i].events.length; k++) {\n\t\t\t\tif (athletes[i].events[k].next_date === targetDate) {\n\t\t\t\t\ttodaysAths.push(athletes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// passing our todayAths and the targetDate off to the function\n\t\t// that builds out our divs of the athletes competing today\n\t\tbuildTodaysAths(todaysAths, targetDate);\n\n\t\t// same as above, we're going to run through all the athletes and\n\t\t// move the ones who are finished competiting to the end of the list\n\t\tvar spliceSpot;\n\n\t\t// find the last athlete to have already finished competiting\n\t\tfor (i=0; i<athletes.length; i++) {\n\t\t\tif (athletes[i].events[0].jsDate < currentDate){\n\t\t\t\tspliceSpot = i;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(spliceSpot);\n\n\t\t// create an array of finished athletes, then add it back into the\n\t\t// master athletes array at the end\n\t\tvar finished = athletes.splice(0, (spliceSpot+1));\n\t\tathletes = athletes.concat(finished);\n\n\t\t// pass the data off to our olympian drawing function\n\t\tbuildOlympians(athletes, \"#olympians\");\n\n\t\t// build the dropdowns\n\t\tbuildFilters();\n\t}\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// BUILDING OUT TODAY'S ATHLETES /////////\n\t/////////////////////////////////////////////\n\n\n\tfunction buildTodaysAths(data, targetDate) {\n\t\tconsole.log(data);\n\t\tif (data.length > 0) {\n\t\t\tvar todaysAths = d3.select(\"#todaysAths\").selectAll(\".upNext\")\n\t\t\t\t.data(data);\n\n\t\t\ttodaysAths.enter().append(\"div\")\n\t\t\t\t.attr(\"class\", \"upNext clearFix\");\n\n\t\t\ttodaysAths.append(\"img\")\n\t\t\t\t.attr(\"src\", function(d) {\n\t\t\t\t\tvar country = d.nation.toLowerCase();\n\t\t\t\t\tcountry = country.replace(/ /g, \"\");\n\t\t\t\t\treturn \"images/_\" + country + \"Flag.jpg\";\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"h6\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\treturn d.name;\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"p\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tvar content;\n\t\t\t\t\tfor (i=0; i < d.events.length; i++) {\n\t\t\t\t\t\tif (d.events[i].next_date === targetDate) {\n\t\t\t\t\t\t\tcontent = d.events[i].event;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn content;\n\t\t\t\t});\n\n\t\t\ttodaysAths.append(\"p\")\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tvar content;\n\t\t\t\t\tfor (i=0; i < d.events.length; i++) {\n\t\t\t\t\t\tif (d.events[i].next_date == targetDate) {\n\t\t\t\t\t\t\tcontent = d.events[i].nexttime + \", \" + d.events[i].channel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn content;\n\t\t\t\t});\n\t\t} else {\n\t\t\t$(\"#scheduleDisplay\").remove();\n\t\t}\n\n\t\t// ENDS D3 ATHLETE DIV SETUP AND BEGINS ASSIGNING FUNCTIONS\n\n\t\t// assigning click funtion that expands and displays an athlete when\n\t\t// their name is clicked on from the schedule of today's athletes\n\n\t\t$(\".upNext h6\").click(function() {\n\n\t\t\tvar athlete;\n\n\t\t\t//grabbing the name of the athlete\n\t\t\tvar target = $(this).text();\n\n\t\t\t// find the corresponding athlete div that matches the target name\n\t\t\t$.each($(\".athlete\"), function() {\n\t\t\t\tif ( $(this).attr(\"data-athlete\") === target) {\n\t\t\t\t\tathlete = $(this);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// pass that div off to the checkExpansion function, which will\n\t\t\t// check if it's expanded currently and show it, then reposition\n\t\t\t// the window to accomodate any movement\n\n\t\t\tshowAthletes(1000);\n\t\t\tcheckExpansion(athlete);\n\t\t});\n\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// BUILDING OUT THE ATHLETE BLOCKS ///////\n\t/////////////////////////////////////////////\n\n\t// below, we're using d3 to build out our divs for each athletes\n\t// as with most things in d3, it's magical. mostly just creating\n\t// html elements based off the data for each athlete\n\n\tfunction buildOlympians(athletes, target) {\n\t\tvar athDivs = d3.select(target).selectAll(\".athlete\")\n\t\t\t.data(athletes);\n\n\t\tathDivs.enter().append(\"div\")\n\t\t\t.attr(\"class\", function(d) {\n\t\t\t\tvar sport = d.sport.toLowerCase();\n\t\t\t\tsport = sport.replace(/ |'|&/g, \"\");\n\t\t\t\tif (d.bronze > 0 || d.silver > 0 || d.gold > 0) {\n\t\t\t\t\treturn \"athlete medalWinner \" + sport;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"athlete \" + sport;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.classed(\"bronzeWinner\", function(d) {\n\t\t\t\tif (d.bronze > 0) {return true;}\n\t\t\t})\n\t\t\t.classed(\"silverWinner\", function(d) {\n\t\t\t\tif (d.silver > 0) {return true;}\n\t\t\t})\n\t\t\t.classed(\"goldWinner\", function(d) {\n\t\t\t\tif (d.gold > 0) {return true;}\n\t\t\t})\n\t\t\t.attr(\"data-athlete\", function(d) {\n\t\t\t\treturn d.name;\n\t\t\t});\n\n\t\tvar expander = athDivs.append(\"i\")\n\t\t\t.attr(\"class\", \"fa fa-plus-circle expander\");\n\n\t\tvar athImage = athDivs.append(\"img\")\n\t\t\t.attr(\"src\", \"images/_defaultImage.jpg\");\n\n\t\tathImage.attr(\"data-src\", function(d) {\n\t\t\t\tvar name = d.name.toLowerCase();\n\t\t\t\tname = name.replace(/ /g, \"\");\n\t\t\t\treturn \"images/_\" + name +\".jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {return d.name;});\n\n\t\tvar athContent = athDivs.append(\"div\")\n\t\t\t.attr(\"class\", \"athContent\");\n\n\n\t\tvar athMedals = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"medalGroup clearFix\");\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"gold\")\n\t\t\t\t.text(function(d) {return d.gold;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"silver\")\n\t\t\t\t.text(function(d) {return d.silver;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"bronze\")\n\t\t\t\t.text(function(d) {return d.bronze;});\n\n\n\t\tvar athName = athContent .append(\"div\")\n\t\t\t.attr(\"class\", \"nameBlock clearFix\");\n\n\t\tathName.append(\"img\")\n\t\t\t.attr(\"src\", function(d) {\n\t\t\t\tvar country = d.nation.toLowerCase();\n\t\t\t\tcountry = country.replace(/ /g, \"\");\n\t\t\t\treturn \"images/_\" + country + \"Flag.jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {\n\t\t\t\treturn d.nation;\n\t\t\t})\n\t\t\t.attr(\"class\", \"flag\");\n\n\t\tathName.append(\"h4\")\n\t\t\t.html(function(d){\n\t\t\t\treturn d.name;\n\t\t\t});\n\n\t\tathName.append(\"h5\")\n\t\t\t.attr(\"class\", \"country\")\n\t\t\t.text(function(d) {\n\t\t\t\treturn d.nation;\n\t\t\t});\n\n\t\tvar athBio = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"bio\");\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Age</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.age + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Texas tie</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.texastie + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Sport</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.sport + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\tathContent.append(\"p\")\n\t\t\t.attr(\"class\", \"blurb\")\n\t\t\t.html(function(d){return d.bio;});\n\n\t\tvar athTable = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"schedule\");\n\n\t\t\tathTable.append(\"p\")\n\t\t\t\t.attr(\"class\", \"label\")\n\t\t\t\t.text(\"Schedule and Results\");\n\n\t\t\tathTable.append(\"table\")\n\t\t\t.attr(\"class\", \"scheduleTable\")\n\t\t\t.html(function(d) {\n\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tfor (i= -1; i < d.events.length; i++) {\n\t\t\t\t\tvar gold = false,\n\t\t\t\t\t\tsilver = false;\n\t\t\t\t\t\tbronze = false;\n\n\t\t\t\t\tif (i >= 0) {\n\t\t\t\t\t\tif (d.events[i].gold === \"x\") {\n\t\t\t\t\t\t\tgold = true;\n\t\t\t\t\t\t} else if (d.events[i].silver === \"x\") {\n\t\t\t\t\t\t\tsilver = true;\n\t\t\t\t\t\t} else if (d.events[i].bronze === \"x\") {\n\t\t\t\t\t\t\tbronze = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (i === -1) {\n\t\t\t\t\t\tcontent +=  \"<tr><th>Event</th><th>Time/Date</th><th>Ch.</th><th>Round/Place</th></tr>\";\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (d.events[i].completed !== \"yes\") {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>\" + d.events[i].nexttime +\", \" + d.events[i].next_date + \"</td><td>\" + d.events[i].channel + \"</td>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>Completed</td><td>\" + d.events[i].channel + \"</td>\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (gold === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal goldMedal'></span>Gold</td></tr>\";\n\t\t\t\t\t\t} else if (silver === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal silverMedal'></span>Silver</td></tr>\";\n\t\t\t\t\t\t} else if (bronze === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal bronzeMedal'></span>Bronze</td></tr>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<td>\" + d.events[i].roundresult +  \"</td></tr>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar athLinks = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"links\")\n\t\t\t.html(function(d) {\n\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tif (d.link1text !== undefined) {\n\t\t\t\t\tcontent += \"<p class='label'>Related content</p>\";\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link1url + \"'>\" + d.link1text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link2text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link2url + \"'>\" + d.link2text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link3text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link3url + \"'>\" + d.link3text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar moreOverlay = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"moreOverlay\")\n\t\t\t.append(\"button\")\n\t\t\t.attr(\"class\", \"readMore\");\n\n\t\tmoreOverlay.html(\"<i class='fa fa-plus-circle'></i> Read more\");\n\n\n\t\t// ENDS D3 ATHLETE DIV SETUP AND BEGINS ASSIGNING FUNCTIONS AND RUNNING LAYOUTS\n\n\t\t// controlling the expanding/collapsing of athlete divs when\n\t\t// the readmore or +/- button is clicked\n\n\t\t$(\".readMore, .expander\").click(function() {\n\t\t\tvar athlete = $(this).closest(\".athlete\");\n\t\t\tcheckExpansion(athlete);\n\t\t});\n\n\n\t\tshowAthletes(nVisible);\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// DISPLAYING 12 AT A TIME  //////////////\n\t/////////////////////////////////////////////\n\n\n\n\tfunction showAthletes(n) {\n\t\tif (n > $(\".athlete\").length - 1) {\n\t\t\tn = $(\".athlete\").length - 1;\n\t\t\t$(\"#loadMore\").addClass(\"noShow\");\n\t\t}\n\t\tfor (i = 0; i <= n; i++) {\n\t\t\tvar imagePath = $(\".athlete\").eq(i).children(\"img\").attr(\"data-src\");\n\t\t\t$(\".athlete\").eq(i).addClass(\"visible\").children(\"img\").attr(\"src\", imagePath);\n\t\t}\n\n\t\tif (n < $(\".athlete\").length - 1) {\n\t\t\tnVisible = nVisible + 12;\n\t\t} else {\n\t\t\t$(\"#loadMore\").remove();\n\t\t}\n\n\t\trunIsotope();\n\n\t}\n\n\t$(\"#loadMore\").click(function() {\n\t\tshowAthletes(nVisible);\n\t});\n\n\n\t/////////////////////////////////////////////\n\t///// CHECKING EXPANSION OR COLLAPSE ////////\n\t/////////////////////////////////////////////\n\n\tfunction checkExpansion(elem) {\n\t\tif (elem.hasClass(\"expanded\") === false) {\n\t\t\texpand(elem, \"expand\"); //open the athlete clicked\n\t\t\t$grid.isotope(\"layout\"); //rerun the isotope layout\n\t\t}\n\t\t// if the athlete is open ...\n\t\telse {\n\t\t\texpand(elem, \"collapse\"); // collapse that athlete\n\t\t\t$grid.isotope(\"layout\"); // rerun the isotope layout\n\t\t}\n\n\t\t// assign the athlete we're clicking on to the movedAthlete variable\n\t\tvar movedAthlete = elem;\n\n\t\t// after the animation has finished running, run the checkPosition function\n\t\tsetTimeout(function() {\n\t\t\tcheckPosition(movedAthlete);\n\t\t}, 525);\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CONTROLLING ATHLETE EXPANSION /////////\n\t/////////////////////////////////////////////\n\n\t// the expand function is passed two parameters, the object we clicked on,\n\t// and the direction (\"expand\" or \"collapse\")\n\n\tfunction expand(athlete, direction) {\n\n\t\t// let's see what we're doing: expanding or collapsing?\n\t\tif (direction === \"expand\") {\n\n\t\t\t// collapse any open athletes, display all hidden read more buttons,\n\t\t\t// and reset all minus circles to plus circles\n\t\t\t$(\".athlete\").removeClass(\"expanded\");\n\t\t\t$(\".athlete\").find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\t$(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\n\t\t\t// on the expanding athlete, swap the plus circle for the minus circle,\n\t\t\t// hide the read more button, then expand with the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-plus-circle\").addClass(\"fa-minus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").addClass(\"hidden\");\n\t\t\tathlete.addClass(\"expanded\");\n\n\t\t} else if (direction === \"collapse\") {\n\n\t\t\t// swap +/- circle, display the read more button, then collapse by\n\t\t\t// removing the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\tathlete.removeClass(\"expanded\");\n\t\t}\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CHECKING EXPANDED ATHLETE POSITION ////\n\t/////////////////////////////////////////////\n\n\t// the checkPosition function is passed the athlete div that has changed\n\t// position. if it falls within 100 pixels of the bottom of the window\n\t// or above the top of the window, the window scrolls to that athlete's position\n\n\tfunction checkPosition(athlete) {\n\n\t\t// grabs the height and scrolltop of the window, and the offset position\n\t\t// of the athlete that has changed layout\n\t\tvar windowHeight = $(window).height();\n\t\tvar top = $(window).scrollTop();\n\t\tvar y = athlete.offset().top;\n\n\t\t// if that athlete falls within 100 pixels of the bottom of the window\n\t\t// or above the top, the window scrolls the athlete into view\n\t\tif (y > top + (windowHeight - 100) || y < top) {\n\t\t\t$(\"html, body\").animate({\n\t\t\t\tscrollTop: y - 100\n\t\t\t}, 500);\n\t\t}\n\t}\n\n\n\n\t/////////////////////////////////////////////\n\t///// INITIALIZING ISOTOPE //////////////////\n\t/////////////////////////////////////////////\n\n\tvar $grid;\n\n\tfunction runIsotope() {\n\t\t// setting up the isotope grid. for more info, see: http://isotope.metafizzy.co/\n\t\t$grid = $(\"#olympians\").isotope({\n\t\t\tlayoutMode: 'packery',\n\t\t\titemSelector: '.athlete',\n\t\t\tprecentPosition: true,\n\t\t\ttransitionDuration: 500\n\t\t});\n\n\t\t// test code to test the sorting function of isotope, will expand later\n\t\tvar sport = \"basketball\";\n\t\tsport = \".\" + \"basketball\";\n\t\t$(\"#testButton\").click(function() {\n\t\t\t$grid.isotope({\n\t\t\t\tfilter: sport\n\t\t\t});\n\t\t});\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CREATING DROPDOWNS ////////////////////\n\t/////////////////////////////////////////////\n\n\tvar sports = [];\n\n\tvar sportSelection = \"athlete\";\n\tvar medalSelection = \"athlete\";\n\n\tfunction buildFilters() {\n\n\t\tfor (i = 0; i < athletes.length; i++) {\n\t\t\tif ($.inArray(athletes[i].sport, sports) === -1) {\n\t\t\t\tsports.push(athletes[i].sport);\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < sports.length; i++) {\n\t\t\tvar sport = sports[i].toLowerCase();\n\t\t\tsport = sport.replace(/ |'|&/g, \"\");\n\t\t\tvar option = \"<option data-selection='\" + sport + \"'>\" + sports[i] + \"</option>\";\n\t\t\t$(\"#sports\").append(option);\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t///// FILTERING AHTLETES ////////////////////\n\t/////////////////////////////////////////////\n\n\n\t$(\"#sports\").change(function() {\n\t\t$(\".athlete\").addClass(\"visible\");\n\t\tsportsSelection = $(this).find(\"option:selected\").attr(\"data-selection\");\n\t\tfilterAthletes(sportsSelection, medalSelection);\n\t});\n\n\t$(\"#medals\").change(function() {\n\t\t$(\".athlete\").addClass(\"visible\");\n\t\tmedalSelection = $(this).find(\"option:selected\").attr(\"data-selection\");\n\t\tfilterAthletes(sportsSelection, medalSelection);\n\t});\n\n\t// $(\"#medals\").change(function() {\n\t// \tmedalSelection = ($(this).find(\"option:selected\").attr(\"data-selection\"));\n\t// \tif (medalSelection === \"all athletes\") {\n\t// \t\tmedalSelection = \"athlete\";\n\t// \t} else if (medalSelection === \"any\")\n\t// \tfilterAthletes(sportsSelection, medalSelection);\n\t// });\n\n\n\tfunction filterAthletes(sport, medal) {\n\n\t\t$(\"#loadMore\").addClass(\"noShow\");\n\n\n\t\tfilterString = \".\"+sport+\".\"+medal;\n\t\t$grid.isotope({\n\t\t\tfilter: filterString\n\t\t});\n\n\t\t$.each($(filterString), function(k,v) {\n\t\t\tvar imagePath = $(this).children(\"img\").attr(\"data-src\");\n\t\t\t$(this).children(\"img\").attr(\"src\", imagePath);\n\t\t});\n\n\t}\n\n\t$(window).scroll(function() {\n\t\tvar athletesTop = $(\"#olympians\").offset().top;\n\t\tif ($(window).scrollTop() > athletesTop) {\n\t\t\t$(\"#filters\").addClass(\"fixed\");\n\t\t} else {\n\t\t\t$(\"#filters\").removeClass(\"fixed\");\n\t\t}\n\n\t});\n\n});\n"],"sourceRoot":"/source/"}