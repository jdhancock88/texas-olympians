{"version":3,"sources":["+custom.js"],"names":["$","document","ready","setupData","athletes","sked","each","k","v","athlete","events","nextDate","this","nextdate","substring","dateParser","parse","dateFormat","dateTime","nexttime","jsDate","Date","name","event","jsdate","next_date","next_time","channel","roundresult","gold","silver","bronze","push","sort","a","b","keyA","keyB","spliceSpot","i","length","currentDate","completedEvents","splice","concat","finished","buildOlympians","buildFilters","console","log","athDivs","d3","select","selectAll","data","enter","append","attr","d","sport","toLowerCase","athContent","replace","athMedals","text","athName","country","nation","html","athBio","bioContent","age","hometown","bio","moreOverlay","content","undefined","link1text","link1url","link2text","link2url","link3text","link3url","click","closest","hasClass","expand","$grid","isotope","movedAthlete","setTimeout","checkPosition","runIsotope","thisObj","direction","removeClass","find","addClass","windowHeight","window","height","top","scrollTop","y","offset","animate","layoutMode","itemSelector","precentPosition","transitionDuration","filter","inArray","sports","option","filterAthletes","medal","filterString","year","getFullYear","dataCounter","time","format","getJSON","medalSelection","change","sportsSelection"],"mappings":"AAAAA,EAAAC,UAAAC,MAAA,WA6DA,QAAAC,GAAAC,EAAAC,GAEAL,EAAAM,KAAAF,EAAA,SAAAG,EAAAC,GAEA,GAAAC,GAAAD,CACAC,GAAAC,UAEAV,EAAAM,KAAAD,EAAA,WAKA,GAAAM,GAAAC,KAAAC,SAAAC,UAAA,EAAA,GASA,IARAH,EAAAI,EAAAC,MAAAL,GACAA,EAAAM,EAAAN,GAGAO,SAAAP,EAAA,KAAAC,KAAAO,SACAC,OAAAC,KAAAL,MAAAE,UAGAT,EAAAa,OAAAV,KAAAH,QAAA,CACA,GAAAc,IACAC,OAAAJ,OACAG,MAAAX,KAAAW,MACAE,UAAAd,EACAe,UAAAd,KAAAO,SACAQ,QAAAf,KAAAe,QACAC,YAAAhB,KAAAgB,YACAC,KAAAjB,KAAAiB,KACAC,OAAAlB,KAAAkB,OACAC,OAAAnB,KAAAmB,OAIAtB,GAAAC,OAAAsB,KAAAT,GAGAd,EAAAC,OAAAuB,KAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAf,MAAAa,EAAAV,QACAa,EAAA,GAAAhB,MAAAc,EAAAX,OAEA,OAAAa,GAAAD,EAAA,GACAA,EAAAC,EAAA,EACA,GAKA,IAAAC,EAIA,KAAAC,EAAA,EAAAA,EAAA9B,EAAAC,OAAA8B,OAAAD,IACA9B,EAAAC,OAAA6B,GAAAf,OAAAiB,IACAH,EAAAC,EAKA,IAAAG,GAAAjC,EAAAC,OAAAiC,OAAA,EAAAL,EAAA,EAIA7B,GAAAC,OAAAD,EAAAC,OAAAkC,OAAAF,QAQAtC,EAAA6B,KAAA,SAAAC,EAAAC,GACA,GAAAC,GAAA,GAAAf,MAAAa,EAAAxB,OAAA,GAAAc,QACAa,EAAA,GAAAhB,MAAAc,EAAAzB,OAAA,GAAAc,OACA,OAAAa,GAAAD,EAAA,GACAA,EAAAC,EAAA,EACA,GAKA,IAAAC,EAGA,KAAAC,EAAA,EAAAA,EAAAnC,EAAAoC,OAAAD,IACAnC,EAAAmC,GAAA7B,OAAA,GAAAc,OAAAiB,IACAH,EAAAC,EAMA,IAAAM,GAAAzC,EAAAuC,OAAA,EAAAL,EAAA,EACAlC,GAAAA,EAAAwC,OAAAC,GAGAC,EAAA1C,GAEA2C,IAYA,QAAAD,GAAA1C,GAEA4C,QAAAC,IAAA7C,EAEA,IAAA8C,GAAAC,GAAAC,OAAA,cAAAC,UAAA,YACAC,KAAAlD,EAEA8C,GAAAK,QAAAC,OAAA,OACAC,KAAA,QAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAC,MAAAC,aACA,OAAA,WAAAD,IAEAF,KAAA,eAAA,SAAAC,GACA,MAAAA,GAAApC,MAGA,IAWAuC,IAXAX,EAAAM,OAAA,KACAC,KAAA,QAAA,8BAEAP,EAAAM,OAAA,OACAC,KAAA,MAAA,SAAAC,GACA,GAAApC,GAAAoC,EAAApC,KAAAsC,aAEA,OADAtC,GAAAA,EAAAwC,QAAA,KAAA,IACA,YAAAxC,EAAA,SAEAmC,KAAA,MAAA,SAAAC,GAAA,MAAAA,GAAApC,OAEA4B,EAAAM,OAAA,OACAC,KAAA,QAAA,eAGAM,EAAAF,EAAAL,OAAA,MACAC,KAAA,QAAA,sBAEAM,GAAAP,OAAA,MACAC,KAAA,QAAA,QACAO,KAAA,SAAAN,GAAA,MAAAA,GAAA7B,OAEAkC,EAAAP,OAAA,MACAC,KAAA,QAAA,UACAO,KAAA,SAAAN,GAAA,MAAAA,GAAA5B,SAEAiC,EAAAP,OAAA,MACAC,KAAA,QAAA,UACAO,KAAA,SAAAN,GAAA,MAAAA,GAAA3B,QAGA,IAAAkC,GAAAJ,EAAAL,OAAA,OACAC,KAAA,QAAA,qBAEAQ,GAAAT,OAAA,OACAC,KAAA,MAAA,SAAAC,GACA,GAAAQ,GAAAR,EAAAS,OAAAP,aAEA,OADAM,GAAAA,EAAAJ,QAAA,KAAA,IACA,WAAAI,EAAA,aAEAT,KAAA,MAAA,SAAAC,GACA,MAAAA,GAAAS,SAEAV,KAAA,QAAA,QAEAQ,EAAAT,OAAA,MACAY,KAAA,SAAAV,GAAA,MAAAA,GAAApC,KAAA,8BAAAoC,EAAAS,OAAA,WAEA,IAAAE,GAAAR,EAAAL,OAAA,OACAC,KAAA,QAAA,MAEAY,GAAAb,OAAA,OACAC,KAAA,QAAA,QACAW,KAAA,SAAAV,GACA,GAAAY,GAAA,0BAEA,OADAA,IAAA,OAAAZ,EAAAa,IAAA,UAIAF,EAAAb,OAAA,OACAC,KAAA,QAAA,QACAW,KAAA,SAAAV,GACA,GAAAY,GAAA,gCAEA,OADAA,IAAA,OAAAZ,EAAAc,SAAA,UAIAH,EAAAb,OAAA,OACAC,KAAA,QAAA,QACAW,KAAA,SAAAV,GACA,GAAAY,GAAA,4BAEA,OADAA,IAAA,OAAAZ,EAAAC,MAAA,UAIAE,EAAAL,OAAA,KACAC,KAAA,QAAA,SACAW,KAAA,SAAAV,GAAA,MAAAA,GAAAe,KAEA,IAuEAC,IAvEAb,EAAAL,OAAA,SACAC,KAAA,QAAA,YACAW,KAAA,SAAAV,GAEA,GAAAiB,GAAA,EAIA,KAFAA,GAAA,4CAEApC,EAAA,GAAAA,EAAAmB,EAAAhD,OAAA8B,OAAAD,IAAA,CACA,GAAAV,IAAA,EACAC,GAAA,CACAC,SAAA,EAEAQ,GAAA,IAEA,MAAAmB,EAAAhD,OAAA6B,GAAAV,KACAA,GAAA,EACA,MAAA6B,EAAAhD,OAAA6B,GAAAT,OACAA,GAAA,EACA,MAAA4B,EAAAhD,OAAA6B,GAAAR,SACAA,QAAA,IAIA,KAAAQ,EACAoC,GAAA,8EAIAA,GADAjB,EAAAhD,OAAA6B,GAAAf,OAAAiB,EACA,WAAAiB,EAAAhD,OAAA6B,GAAAhB,MAAA,YAAAmC,EAAAhD,OAAA6B,GAAAb,UAAA,KAAAgC,EAAAhD,OAAA6B,GAAAd,UAAA,YAAAiC,EAAAhD,OAAA6B,GAAAZ,QAAA,QAEA,WAAA+B,EAAAhD,OAAA6B,GAAAhB,MAAA,mCAIAoD,GADA9C,KAAA,EACA,0DACAC,KAAA,EACA,8DACAC,UAAA,EACA,8DAEA,OAAA2B,EAAAhD,OAAA6B,GAAAX,YAAA,cAKA,MAAA+C,KAIAd,EAAAL,OAAA,MACAC,KAAA,QAAA,SACAW,KAAA,SAAAV,GACA,GAAAiB,GAAA,EAcA,OAZAC,UAAAlB,EAAAmB,YACAF,GAAA,gCAAAjB,EAAAoB,SAAA,KAAApB,EAAAmB,UAAA,aAGAD,SAAAlB,EAAAqB,YACAJ,GAAA,gCAAAjB,EAAAsB,SAAA,KAAAtB,EAAAqB,UAAA,aAGAH,SAAAlB,EAAAuB,YACAN,GAAA,gCAAAjB,EAAAwB,SAAA,KAAAxB,EAAAuB,UAAA,aAGAN,IAIAd,EAAAL,OAAA,OACAC,KAAA,QAAA,eACAD,OAAA,UACAC,KAAA,QAAA,YAEAiB,GAAAN,KAAA,+CAQApE,EAAA,wBAAAmF,MAAA,WAEAnF,EAAAY,MAAAwE,QAAA,YAAAC,SAAA,eAAA,GACAC,EAAAtF,EAAAY,MAAA,UACA2E,EAAAC,QAAA,YAIAF,EAAAtF,EAAAY,MAAA,YACA2E,EAAAC,QAAA,UAIA,IAAAC,GAAAzF,EAAAY,MAAAwE,QAAA,WAGAM,YAAA,WACAC,EAAAF,IACA,OAKAG,IAYA,QAAAN,GAAAO,EAAAC,GAGA,GAAArF,GAAAoF,EAAAT,QAAA,WAGA,YAAAU,GAIA9F,EAAA,YAAA+F,YAAA,YACA/F,EAAA,YAAAgG,KAAA,gBAAAD,YAAA,UACA/F,EAAA,aAAA+F,YAAA,mBAAAE,SAAA,kBAIAxF,EAAAuF,KAAA,aAAAD,YAAA,kBAAAE,SAAA,mBACAxF,EAAAuF,KAAA,gBAAAC,SAAA,UACAxF,EAAAwF,SAAA,aAEA,aAAAH,IAIArF,EAAAuF,KAAA,aAAAD,YAAA,mBAAAE,SAAA,kBACAxF,EAAAuF,KAAA,gBAAAD,YAAA,UACAtF,EAAAsF,YAAA,aAaA,QAAAJ,GAAAlF,GAIA,GAAAyF,GAAAlG,EAAAmG,QAAAC,SACAC,EAAArG,EAAAmG,QAAAG,YACAC,EAAA9F,EAAA+F,SAAAH,KAIAE,EAAAF,GAAAH,EAAA,MAAAG,EAAAE,IACAvG,EAAA,cAAAyG,SACAH,UAAAC,EAAA,KACA,KAYA,QAAAX,KAGAL,EAAAvF,EAAA,cAAAwF,SACAkB,WAAA,UACAC,aAAA,WACAC,iBAAA,EACAC,mBAAA,KAIA,IAAAlD,GAAA,YACAA,GAAA,cACA3D,EAAA,eAAAmF,MAAA,WACAnC,QAAAC,IAAA,QACAsC,EAAAC,SACAsB,OAAAnD,MAgBA,QAAAZ,KAEA,IAAAR,EAAA,EAAAA,EAAAnC,EAAAoC,OAAAD,IACAS,QAAAC,IAAA7C,EAAAmC,GAAAoB,OACA,KAAA3D,EAAA+G,QAAA3G,EAAAmC,GAAAoB,MAAAqD,IACAA,EAAAhF,KAAA5B,EAAAmC,GAAAoB,MAMA,KAFAX,QAAAC,IAAA+D,GAEAzE,EAAA,EAAAA,EAAAyE,EAAAxE,OAAAD,IAAA,CACA,GAAA0E,GAAA,2BAAAD,EAAAzE,GAAAqB,cAAA,KAAAoD,EAAAzE,GAAA,WACAvC,GAAA,WAAAwD,OAAAyD,IA0BA,QAAAC,GAAAvD,EAAAwD,GAEAC,aAAA,IAAAzD,EAAA,IAAAwD,EACAnE,QAAAC,IAAAmE,cACA7B,EAAAC,SACAsB,OAAAM,eAvgBA,GAAA3E,GAAA,GAAApB,MACAgG,EAAA5E,EAAA6E,aAEAtH,GAAA,cAAAgE,KAAAqD,EAGA,IAGAhH,GACAD,EAJAmH,EAAA,EAOAxG,EAAAoC,GAAAqE,KAAAC,OAAA,YAGAxG,EAAAkC,GAAAqE,KAAAC,OAAA,aASAzH,GAAA0H,QAAA,sFAAA,SAAApE,GACAjD,EAAAiD,EACAiE,IAEA,IAAAA,GACApH,EAAAC,EAAAC,KAIAL,EAAA0H,QAAA,0FAAA,SAAApE,GACAlD,EAAAkD,EACAiE,IAEA,IAAAA,GACApH,EAAAC,EAAAC,IAkZA,IAAAkF,GA6BAyB,KAGAW,EAAA,SAwBA3H,GAAA,WAAA4H,OAAA,WACAC,gBAAA7H,EAAAY,MAAAoF,KAAA,mBAAAvC,KAAA,kBACA,eAAAoE,kBACAA,gBAAA,WAEAX,EAAAW,gBAAAF","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar currentDate = new Date();\n\tvar year = currentDate.getFullYear();\n\n\t$('.copyright').text(year);\n\n\t// data counter will keep track if all of our data is loaded before we build the page\n\tvar dataCounter = 0;\n\n\t// variables that will ultimately hold our data\n\tvar sked;\n\tvar athletes;\n\n\t// date parser to parse the string into a date object\n\tvar dateParser = d3.time.format(\"%Y-%m-%d\");\n\n\t// date formater turns the date object into the correct Mon. Day, Year format\n\tvar dateFormat = d3.time.format(\"%b. %d, %Y\");\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// GETTING THE DATA //////////////////////\n\t/////////////////////////////////////////////\n\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-sked.json\", function(data) {\n\t\tsked = data;\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\t});\n\n\t$.getJSON(\"http://interactives.dallasnews.com/data-store/2016/062016-texas-olympians-athletes.json\", function(data) {\n\t\tathletes = data;\n\t\tdataCounter++;\n\n\t\tif (dataCounter === 2) {\n\t\t\tsetupData(athletes, sked);\n\t\t}\n\t});\n\n\n\n\n\t/////////////////////////////////////////////\n\t///// SETTING UP OUR DATA FOR ALL ATHLETES //\n\t/////////////////////////////////////////////\n\n\n\t// for each athlete, we'll cycle through our sked and add each event\n\t// to an events key on the athlete object\n\n\tfunction setupData(athletes, sked) {\n\n\t\t$.each(athletes, function(k,v) {\n\n\t\t\tvar athlete = v;\n\t\t\tathlete.events = [];\n\n\t\t\t$.each(sked, function() {\n\n\t\t\t\t// cut our date down to just YYYY-MM-DD\n\t\t\t\t// parse it into a date object\n\t\t\t\t// then format it into our MMM. DD, YYYY format\n\t\t\t\tvar nextDate = this.nextdate.substring(0,10);\n\t\t\t\tnextDate = dateParser.parse(nextDate);\n\t\t\t\tnextDate = dateFormat(nextDate);\n\n\t\t\t\t// create a string to get a valid date and time to be parsed into an accurate js date\n\t\t\t\tdateTime = nextDate + \", \" + this.nexttime;\n\t\t\t\tjsDate = Date.parse(dateTime);\n\n\t\t\t\t// add each event into our events key\n\t\t\t\tif (athlete.name === this.athlete) {\n\t\t\t\t\tvar event = {\n\t\t\t\t\t\t\"jsdate\": jsDate,\n\t\t\t\t\t\t\"event\": this.event,\n\t\t\t\t\t\t\"next_date\": nextDate,\n\t\t\t\t\t\t\"next_time\": this.nexttime,\n\t\t\t\t\t\t\"channel\": this.channel,\n\t\t\t\t\t\t\"roundresult\": this.roundresult,\n\t\t\t\t\t\t\"gold\": this.gold,\n\t\t\t\t\t\t\"silver\": this.silver,\n\t\t\t\t\t\t\"bronze\": this.bronze,\n\t\t\t\t\t};\n\n\t\t\t\t\t// push each event to the events array on each athlete\n\t\t\t\t\tathlete.events.push(event);\n\n\t\t\t\t\t// sorts the individual events on each athlete by next event date and time\n\t\t\t\t\tathlete.events.sort(function(a, b) {\n\t\t\t\t\t\tvar keyA = new Date(a.jsdate),\n\t\t\t\t\t\t\tkeyB = new Date(b.jsdate);\n\n\t\t\t\t\t\tif (keyA < keyB) return -1;\n\t\t\t\t\t\tif (keyA > keyB) return 1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\n\t\t\t\t\t// setting a variable that will be where we splice the events\n\t\t\t\t\t// array when we check to see if the events have finished\n\t\t\t\t\tvar spliceSpot;\n\n\t\t\t\t\t// iterate over each event, and find the last event to already\n\t\t\t\t\t// have occurred\n\t\t\t\t\tfor (i=0; i<athlete.events.length; i++) {\n\t\t\t\t\t\tif (athlete.events[i].jsdate < currentDate){\n\t\t\t\t\t\t\tspliceSpot = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// create an array of events that are finished and have no upcoming times\n\t\t\t\t\tvar completedEvents = athlete.events.splice(0, (spliceSpot + 1));\n\n\t\t\t\t\t// merge the events back together in one array\n\t\t\t\t\t// with the completed events at the end\n\t\t\t\t\tathlete.events = athlete.events.concat(completedEvents);\n\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\n\t\t// sorts the athletes by their next event date and time\n\t\tathletes.sort(function(a, b) {\n\t\t\tvar keyA = new Date(a.events[0].jsdate),\n\t\t\t\tkeyB = new Date(b.events[0].jsdate);\n\t\t\tif (keyA < keyB) return -1;\n\t\t\tif (keyA > keyB) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\t\t// same as above, we're going to run through all the athletes and\n\t\t// move the ones who are finished competiting to the end of the list\n\t\tvar spliceSpot;\n\n\t\t// find the last athlete to have already finished competiting\n\t\tfor (i=0; i<athletes.length; i++) {\n\t\t\tif (athletes[i].events[0].jsdate < currentDate){\n\t\t\t\tspliceSpot = i;\n\t\t\t}\n\t\t}\n\n\t\t// create an array of finished athletes, then add it back into the\n\t\t// master athletes array at the end\n\t\tvar finished = athletes.splice(0, (spliceSpot+1));\n\t\tathletes = athletes.concat(finished);\n\n\t\t// pass the data off to our olympian drawing function\n\t\tbuildOlympians(athletes);\n\n\t\tbuildFilters();\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// BUILDING OUT THE PAGE /////////////////\n\t/////////////////////////////////////////////\n\n\t// below, we're using d3 to build out our divs for each athletes\n\t// as with most things in d3, it's magical. mostly just creating\n\t// html elements based off the data for each athlete\n\n\tfunction buildOlympians(athletes) {\n\n\t\tconsole.log(athletes);\n\n\t\tvar athDivs = d3.select(\"#olympians\").selectAll(\".athlete\")\n\t\t\t.data(athletes);\n\n\t\tathDivs.enter().append(\"div\")\n\t\t\t.attr(\"class\", function(d) {\n\t\t\t\tvar sport = d.sport.toLowerCase();\n\t\t\t\treturn \"athlete \" + sport;\n\t\t\t})\n\t\t\t.attr(\"data-athlete\", function(d) {\n\t\t\t\treturn d.name;\n\t\t\t});\n\n\t\tvar expander = athDivs.append(\"i\")\n\t\t\t.attr(\"class\", \"fa fa-plus-circle expander\");\n\n\t\tvar athImage = athDivs.append(\"img\")\n\t\t\t.attr(\"src\", function(d) {\n\t\t\t\tvar name = d.name.toLowerCase();\n\t\t\t\tname = name.replace(/ /g, \"\");\n\t\t\t\treturn \"/images/_\" + name +\".jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {return d.name;});\n\n\t\tvar athContent = athDivs.append(\"div\")\n\t\t\t.attr(\"class\", \"athContent\");\n\n\n\t\tvar athMedals = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"medalGroup clearFix\");\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"gold\")\n\t\t\t\t.text(function(d) {return d.gold;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"silver\")\n\t\t\t\t.text(function(d) {return d.silver;});\n\n\t\t\tathMedals.append(\"li\")\n\t\t\t\t.attr(\"class\", \"bronze\")\n\t\t\t\t.text(function(d) {return d.bronze;});\n\n\n\t\tvar athName = athContent .append(\"div\")\n\t\t\t.attr(\"class\", \"nameBlock clearFix\");\n\n\t\tathName.append(\"img\")\n\t\t\t.attr(\"src\", function(d) {\n\t\t\t\tvar country = d.nation.toLowerCase();\n\t\t\t\tcountry = country.replace(/ /g, \"\");\n\t\t\t\treturn \"images/_\" + country + \"Flag.jpg\";\n\t\t\t})\n\t\t\t.attr(\"alt\", function(d) {\n\t\t\t\treturn d.nation;\n\t\t\t})\n\t\t\t.attr(\"class\", \"flag\");\n\n\t\tathName.append(\"h4\")\n\t\t\t.html(function(d){return d.name + \" <span class='country'>  | \" + d.nation + \"</span>\" ;});\n\n\t\tvar athBio = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"bio\");\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Age</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.age + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Texas tie</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.hometown + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\t\tathBio.append(\"div\")\n\t\t\t\t.attr(\"class\", \"info\")\n\t\t\t\t.html(function(d) {\n\t\t\t\t\tvar bioContent = \"<p class='label'>Sport</p>\";\n\t\t\t\t\tbioContent += \"<h6>\" + d.sport + \"</h6>\";\n \t\t\t\t\treturn bioContent;\n\t\t\t\t});\n\n\t\tathContent.append(\"p\")\n\t\t\t.attr(\"class\", \"blurb\")\n\t\t\t.html(function(d){return d.bio;});\n\n\t\tvar athTable = athContent.append(\"table\")\n\t\t\t.attr(\"class\", \"schedule\")\n\t\t\t.html(function(d) {\n\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tcontent += \"<p class='label'>Schedule and Results</p>\";\n\n\t\t\t\tfor (i= -1; i < d.events.length; i++) {\n\t\t\t\t\tvar gold = false,\n\t\t\t\t\t\tsilver = false;\n\t\t\t\t\t\tbronze = false;\n\n\t\t\t\t\tif (i >= 0) {\n\n\t\t\t\t\t\tif (d.events[i].gold === \"x\") {\n\t\t\t\t\t\t\tgold = true;\n\t\t\t\t\t\t} else if (d.events[i].silver === \"x\") {\n\t\t\t\t\t\t\tsilver = true;\n\t\t\t\t\t\t} else if (d.events[i].bronze === \"x\") {\n\t\t\t\t\t\t\tbronze = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (i === -1) {\n\t\t\t\t\t\tcontent +=  \"<tr><th>Event</th><th>Time/Date</th><th>Ch.</th><th>Round/Result</th></tr>\";\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif (d.events[i].jsdate > currentDate) {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>\" + d.events[i].next_time +\", \" + d.events[i].next_date + \"</td><td>\" + d.events[i].channel + \"</td>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<tr><td>\" + d.events[i].event + \"</td><td>Completed</td><td></td>\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (gold === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal goldMedal'></span>Gold</td></tr>\";\n\t\t\t\t\t\t} else if (silver === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal silverMedal'></span>Silver</td></tr>\";\n\t\t\t\t\t\t} else if (bronze === true) {\n\t\t\t\t\t\t\tcontent += \"<td><span class='medal bronzeMedal'></span>Bronze</td></tr>\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontent += \"<td>\" + d.events[i].roundresult +  \"</td></tr>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar athLinks = athContent.append(\"ul\")\n\t\t\t.attr(\"class\", \"links\")\n\t\t\t.html(function(d) {\n\t\t\t\tvar content = \"\";\n\n\t\t\t\tif (d.link1text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link1url + \"'>\" + d.link1text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link2text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link2url + \"'>\" + d.link2text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\tif (d.link3text !== undefined) {\n\t\t\t\t\tcontent += \"<li><a target='_blank' href='\" + d.link3url + \"'>\" + d.link3text + \"</a></li>\";\n\t\t\t\t}\n\n\t\t\t\treturn content;\n\n\t\t\t});\n\n\t\tvar moreOverlay = athContent.append(\"div\")\n\t\t\t.attr(\"class\", \"moreOverlay\")\n\t\t\t.append(\"button\")\n\t\t\t.attr(\"class\", \"readMore\");\n\n\t\tmoreOverlay.html(\"<i class='fa fa-plus-circle'></i> Read more\");\n\n\n\t\t// ENDS D3 ATHLETE DIV SETUP AND BEGINS ASSIGNING FUNCTIONS AND RUNNING LAYOUTS\n\n\t\t// controlling the expanding/collapsing of athlete divs when\n\t\t// the readmore or +/- button is clicked\n\n\t\t$(\".readMore, .expander\").click(function() {\n\t\t\t// if the athlete clicked isn't already open ...\n\t\t\tif ($(this).closest(\".athlete\").hasClass(\"expanded\") === false) {\n\t\t\t\texpand($(this), \"expand\"); //open the athlete clicked\n\t\t\t\t$grid.isotope(\"layout\"); //rerun the isotope layout\n\t\t\t}\n\t\t\t// if the athlete is open ...\n\t\t\telse {\n\t\t\t\texpand($(this), \"collapse\"); // collapse that athlete\n\t\t\t\t$grid.isotope(\"layout\"); // rerun the isotope layout\n\t\t\t}\n\n\t\t\t// assign the athlete we're clicking on to the movedAthlete variable\n\t\t\tvar movedAthlete = $(this).closest(\".athlete\");\n\n\t\t\t// after the animation has finished running, run the checkPosition function\n\t\t\tsetTimeout(function() {\n\t\t\t\tcheckPosition(movedAthlete);\n\t\t\t}, 525);\n\n\t\t});\n\n\t\t// initializes isotope\n\t\trunIsotope();\n\t}\n\n\n\n\t/////////////////////////////////////////////\n\t///// CONTROLLING ATHLETE EXPANSION /////////\n\t/////////////////////////////////////////////\n\n\t// the expand function is passed two parameters, the object we clicked on,\n\t// and the direction (\"expand\" or \"collapse\")\n\n\tfunction expand(thisObj, direction) {\n\n\t\t// assigning the athlete variable to the athlete div\n\t\tvar athlete = thisObj.closest(\".athlete\");\n\n\t\t// let's see what we're doing: expanding or collapsing?\n\t\tif (direction === \"expand\") {\n\n\t\t\t// collapse any open athletes, display all hidden read more buttons,\n\t\t\t// and reset all minus circles to plus circles\n\t\t\t$(\".athlete\").removeClass(\"expanded\");\n\t\t\t$(\".athlete\").find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\t$(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\n\t\t\t// on the expanding athlete, swap the plus circle for the minus circle,\n\t\t\t// hide the read more button, then expand with the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-plus-circle\").addClass(\"fa-minus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").addClass(\"hidden\");\n\t\t\tathlete.addClass(\"expanded\");\n\n\t\t} else if (direction === \"collapse\") {\n\n\t\t\t// swap +/- circle, display the read more button, then collapse by\n\t\t\t// removing the expanded class\n\t\t\tathlete.find(\".expander\").removeClass(\"fa-minus-circle\").addClass(\"fa-plus-circle\");\n\t\t\tathlete.find(\".moreOverlay\").removeClass(\"hidden\");\n\t\t\tathlete.removeClass(\"expanded\");\n\t\t}\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CHECKING EXPANDED ATHLETE POSITION ////\n\t/////////////////////////////////////////////\n\n\t// the checkPosition function is passed the athlete div that has changed\n\t// position. if it falls within 100 pixels of the bottom of the window\n\t// or above the top of the window, the window scrolls to that athlete's position\n\n\tfunction checkPosition(athlete) {\n\n\t\t// grabs the height and scrolltop of the window, and the offset position\n\t\t// of the athlete that has changed layout\n\t\tvar windowHeight = $(window).height();\n\t\tvar top = $(window).scrollTop();\n\t\tvar y = athlete.offset().top;\n\n\t\t// if that athlete falls within 100 pixels of the bottom of the window\n\t\t// or above the top, the window scrolls the athlete into view\n\t\tif (y > top + (windowHeight - 100) || y < top) {\n\t\t\t$(\"html, body\").animate({\n\t\t\t\tscrollTop: y - 100\n\t\t\t}, 500);\n\t\t}\n\t}\n\n\n\n\t/////////////////////////////////////////////\n\t///// INITIALIZING ISOTOPE //////////////////\n\t/////////////////////////////////////////////\n\n\tvar $grid;\n\n\tfunction runIsotope() {\n\n\t\t// setting up the isotope grid. for more info, see: http://isotope.metafizzy.co/\n\t\t$grid = $(\"#olympians\").isotope({\n\t\t\tlayoutMode: 'packery',\n\t\t\titemSelector: '.athlete',\n\t\t\tprecentPosition: true,\n\t\t\ttransitionDuration: 500\n\t\t});\n\n\t\t// test code to test the sorting function of isotope, will expand later\n\t\tvar sport = \"basketball\";\n\t\tsport = \".\" + \"basketball\";\n\t\t$(\"#testButton\").click(function() {\n\t\t\tconsole.log(\"test\");\n\t\t\t$grid.isotope({\n\t\t\t\tfilter: sport\n\t\t\t});\n\t\t});\n\n\t}\n\n\n\t/////////////////////////////////////////////\n\t///// CREATING DROPDOWNS ////////////////////\n\t/////////////////////////////////////////////\n\n\tvar sports = [];\n\n\tvar sportSelection = \"athlete\";\n\tvar medalSelection = \"athlete\";\n\n\tfunction buildFilters() {\n\n\t\tfor (i = 0; i < athletes.length; i++) {\n\t\t\tconsole.log(athletes[i].sport);\n\t\t\tif ($.inArray(athletes[i].sport, sports) === -1) {\n\t\t\t\tsports.push(athletes[i].sport);\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(sports);\n\n\t\tfor (i = 0; i < sports.length; i++) {\n\t\t\tvar option = \"<option data-selection='\" + sports[i].toLowerCase() + \"'>\" + sports[i] + \"</option>\";\n\t\t\t$(\"#sports\").append(option);\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////\n\t///// FILTERING AHTLETES ////////////////////\n\t/////////////////////////////////////////////\n\n\n\t$(\"#sports\").change(function() {\n\t\tsportsSelection = ($(this).find(\"option:selected\").attr(\"data-selection\"));\n\t\tif (sportsSelection === \"all sports\") {\n\t\t\tsportsSelection = \"athlete\";\n\t\t}\n\t\tfilterAthletes(sportsSelection, medalSelection);\n\t});\n\n\t// $(\"#medals\").change(function() {\n\t// \tmedalSelection = ($(this).find(\"option:selected\").attr(\"data-selection\"));\n\t// \tif (medalSelection === \"all athletes\") {\n\t// \t\tmedalSelection = \"athlete\";\n\t// \t} else if (medalSelection === \"any\")\n\t// \tfilterAthletes(sportsSelection, medalSelection);\n\t// });\n\n\n\tfunction filterAthletes(sport, medal) {\n\n\t\tfilterString = \".\"+sport+\".\"+medal;\n\t\tconsole.log(filterString);\n\t\t$grid.isotope({\n\t\t\tfilter: filterString\n\t\t});\n\n\t}\n\n});\n"],"sourceRoot":"/source/"}